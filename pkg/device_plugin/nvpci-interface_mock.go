// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package device_plugin

import (
	"gitlab.com/nvidia/cloud-native/go-nvlib/pkg/nvpci"
	"sync"
)

// Ensure, that nvpciInterfaceMock does implement nvpciInterface.
// If this is not the case, regenerate this file with moq.
var _ nvpciInterface = &nvpciInterfaceMock{}

// nvpciInterfaceMock is a mock implementation of nvpciInterface.
//
//	func TestSomethingThatUsesnvpciInterface(t *testing.T) {
//
//		// make and configure a mocked nvpciInterface
//		mockednvpciInterface := &nvpciInterfaceMock{
//			Get3DControllersFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the Get3DControllers method")
//			},
//			GetAllDevicesFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetAllDevices method")
//			},
//			GetDPUsFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetDPUs method")
//			},
//			GetGPUByIndexFunc: func(n int) (*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetGPUByIndex method")
//			},
//			GetGPUByPciBusIDFunc: func(s string) (*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetGPUByPciBusID method")
//			},
//			GetGPUsFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetGPUs method")
//			},
//			GetNVSwitchesFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetNVSwitches method")
//			},
//			GetNetworkControllersFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetNetworkControllers method")
//			},
//			GetPciBridgesFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetPciBridges method")
//			},
//			GetVGAControllersFunc: func() ([]*nvpci.NvidiaPCIDevice, error) {
//				panic("mock out the GetVGAControllers method")
//			},
//		}
//
//		// use mockednvpciInterface in code that requires nvpciInterface
//		// and then make assertions.
//
//	}
type nvpciInterfaceMock struct {
	// Get3DControllersFunc mocks the Get3DControllers method.
	Get3DControllersFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetAllDevicesFunc mocks the GetAllDevices method.
	GetAllDevicesFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetDPUsFunc mocks the GetDPUs method.
	GetDPUsFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetGPUByIndexFunc mocks the GetGPUByIndex method.
	GetGPUByIndexFunc func(n int) (*nvpci.NvidiaPCIDevice, error)

	// GetGPUByPciBusIDFunc mocks the GetGPUByPciBusID method.
	GetGPUByPciBusIDFunc func(s string) (*nvpci.NvidiaPCIDevice, error)

	// GetGPUsFunc mocks the GetGPUs method.
	GetGPUsFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetNVSwitchesFunc mocks the GetNVSwitches method.
	GetNVSwitchesFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetNetworkControllersFunc mocks the GetNetworkControllers method.
	GetNetworkControllersFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetPciBridgesFunc mocks the GetPciBridges method.
	GetPciBridgesFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// GetVGAControllersFunc mocks the GetVGAControllers method.
	GetVGAControllersFunc func() ([]*nvpci.NvidiaPCIDevice, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get3DControllers holds details about calls to the Get3DControllers method.
		Get3DControllers []struct {
		}
		// GetAllDevices holds details about calls to the GetAllDevices method.
		GetAllDevices []struct {
		}
		// GetDPUs holds details about calls to the GetDPUs method.
		GetDPUs []struct {
		}
		// GetGPUByIndex holds details about calls to the GetGPUByIndex method.
		GetGPUByIndex []struct {
			// N is the n argument value.
			N int
		}
		// GetGPUByPciBusID holds details about calls to the GetGPUByPciBusID method.
		GetGPUByPciBusID []struct {
			// S is the s argument value.
			S string
		}
		// GetGPUs holds details about calls to the GetGPUs method.
		GetGPUs []struct {
		}
		// GetNVSwitches holds details about calls to the GetNVSwitches method.
		GetNVSwitches []struct {
		}
		// GetNetworkControllers holds details about calls to the GetNetworkControllers method.
		GetNetworkControllers []struct {
		}
		// GetPciBridges holds details about calls to the GetPciBridges method.
		GetPciBridges []struct {
		}
		// GetVGAControllers holds details about calls to the GetVGAControllers method.
		GetVGAControllers []struct {
		}
	}
	lockGet3DControllers      sync.RWMutex
	lockGetAllDevices         sync.RWMutex
	lockGetDPUs               sync.RWMutex
	lockGetGPUByIndex         sync.RWMutex
	lockGetGPUByPciBusID      sync.RWMutex
	lockGetGPUs               sync.RWMutex
	lockGetNVSwitches         sync.RWMutex
	lockGetNetworkControllers sync.RWMutex
	lockGetPciBridges         sync.RWMutex
	lockGetVGAControllers     sync.RWMutex
}

// Get3DControllers calls Get3DControllersFunc.
func (mock *nvpciInterfaceMock) Get3DControllers() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.Get3DControllersFunc == nil {
		panic("nvpciInterfaceMock.Get3DControllersFunc: method is nil but nvpciInterface.Get3DControllers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGet3DControllers.Lock()
	mock.calls.Get3DControllers = append(mock.calls.Get3DControllers, callInfo)
	mock.lockGet3DControllers.Unlock()
	return mock.Get3DControllersFunc()
}

// Get3DControllersCalls gets all the calls that were made to Get3DControllers.
// Check the length with:
//
//	len(mockednvpciInterface.Get3DControllersCalls())
func (mock *nvpciInterfaceMock) Get3DControllersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGet3DControllers.RLock()
	calls = mock.calls.Get3DControllers
	mock.lockGet3DControllers.RUnlock()
	return calls
}

// GetAllDevices calls GetAllDevicesFunc.
func (mock *nvpciInterfaceMock) GetAllDevices() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetAllDevicesFunc == nil {
		panic("nvpciInterfaceMock.GetAllDevicesFunc: method is nil but nvpciInterface.GetAllDevices was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllDevices.Lock()
	mock.calls.GetAllDevices = append(mock.calls.GetAllDevices, callInfo)
	mock.lockGetAllDevices.Unlock()
	return mock.GetAllDevicesFunc()
}

// GetAllDevicesCalls gets all the calls that were made to GetAllDevices.
// Check the length with:
//
//	len(mockednvpciInterface.GetAllDevicesCalls())
func (mock *nvpciInterfaceMock) GetAllDevicesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllDevices.RLock()
	calls = mock.calls.GetAllDevices
	mock.lockGetAllDevices.RUnlock()
	return calls
}

// GetDPUs calls GetDPUsFunc.
func (mock *nvpciInterfaceMock) GetDPUs() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetDPUsFunc == nil {
		panic("nvpciInterfaceMock.GetDPUsFunc: method is nil but nvpciInterface.GetDPUs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDPUs.Lock()
	mock.calls.GetDPUs = append(mock.calls.GetDPUs, callInfo)
	mock.lockGetDPUs.Unlock()
	return mock.GetDPUsFunc()
}

// GetDPUsCalls gets all the calls that were made to GetDPUs.
// Check the length with:
//
//	len(mockednvpciInterface.GetDPUsCalls())
func (mock *nvpciInterfaceMock) GetDPUsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDPUs.RLock()
	calls = mock.calls.GetDPUs
	mock.lockGetDPUs.RUnlock()
	return calls
}

// GetGPUByIndex calls GetGPUByIndexFunc.
func (mock *nvpciInterfaceMock) GetGPUByIndex(n int) (*nvpci.NvidiaPCIDevice, error) {
	if mock.GetGPUByIndexFunc == nil {
		panic("nvpciInterfaceMock.GetGPUByIndexFunc: method is nil but nvpciInterface.GetGPUByIndex was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetGPUByIndex.Lock()
	mock.calls.GetGPUByIndex = append(mock.calls.GetGPUByIndex, callInfo)
	mock.lockGetGPUByIndex.Unlock()
	return mock.GetGPUByIndexFunc(n)
}

// GetGPUByIndexCalls gets all the calls that were made to GetGPUByIndex.
// Check the length with:
//
//	len(mockednvpciInterface.GetGPUByIndexCalls())
func (mock *nvpciInterfaceMock) GetGPUByIndexCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetGPUByIndex.RLock()
	calls = mock.calls.GetGPUByIndex
	mock.lockGetGPUByIndex.RUnlock()
	return calls
}

// GetGPUByPciBusID calls GetGPUByPciBusIDFunc.
func (mock *nvpciInterfaceMock) GetGPUByPciBusID(s string) (*nvpci.NvidiaPCIDevice, error) {
	if mock.GetGPUByPciBusIDFunc == nil {
		panic("nvpciInterfaceMock.GetGPUByPciBusIDFunc: method is nil but nvpciInterface.GetGPUByPciBusID was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetGPUByPciBusID.Lock()
	mock.calls.GetGPUByPciBusID = append(mock.calls.GetGPUByPciBusID, callInfo)
	mock.lockGetGPUByPciBusID.Unlock()
	return mock.GetGPUByPciBusIDFunc(s)
}

// GetGPUByPciBusIDCalls gets all the calls that were made to GetGPUByPciBusID.
// Check the length with:
//
//	len(mockednvpciInterface.GetGPUByPciBusIDCalls())
func (mock *nvpciInterfaceMock) GetGPUByPciBusIDCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetGPUByPciBusID.RLock()
	calls = mock.calls.GetGPUByPciBusID
	mock.lockGetGPUByPciBusID.RUnlock()
	return calls
}

// GetGPUs calls GetGPUsFunc.
func (mock *nvpciInterfaceMock) GetGPUs() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetGPUsFunc == nil {
		panic("nvpciInterfaceMock.GetGPUsFunc: method is nil but nvpciInterface.GetGPUs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGPUs.Lock()
	mock.calls.GetGPUs = append(mock.calls.GetGPUs, callInfo)
	mock.lockGetGPUs.Unlock()
	return mock.GetGPUsFunc()
}

// GetGPUsCalls gets all the calls that were made to GetGPUs.
// Check the length with:
//
//	len(mockednvpciInterface.GetGPUsCalls())
func (mock *nvpciInterfaceMock) GetGPUsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGPUs.RLock()
	calls = mock.calls.GetGPUs
	mock.lockGetGPUs.RUnlock()
	return calls
}

// GetNVSwitches calls GetNVSwitchesFunc.
func (mock *nvpciInterfaceMock) GetNVSwitches() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetNVSwitchesFunc == nil {
		panic("nvpciInterfaceMock.GetNVSwitchesFunc: method is nil but nvpciInterface.GetNVSwitches was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetNVSwitches.Lock()
	mock.calls.GetNVSwitches = append(mock.calls.GetNVSwitches, callInfo)
	mock.lockGetNVSwitches.Unlock()
	return mock.GetNVSwitchesFunc()
}

// GetNVSwitchesCalls gets all the calls that were made to GetNVSwitches.
// Check the length with:
//
//	len(mockednvpciInterface.GetNVSwitchesCalls())
func (mock *nvpciInterfaceMock) GetNVSwitchesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetNVSwitches.RLock()
	calls = mock.calls.GetNVSwitches
	mock.lockGetNVSwitches.RUnlock()
	return calls
}

// GetNetworkControllers calls GetNetworkControllersFunc.
func (mock *nvpciInterfaceMock) GetNetworkControllers() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetNetworkControllersFunc == nil {
		panic("nvpciInterfaceMock.GetNetworkControllersFunc: method is nil but nvpciInterface.GetNetworkControllers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetNetworkControllers.Lock()
	mock.calls.GetNetworkControllers = append(mock.calls.GetNetworkControllers, callInfo)
	mock.lockGetNetworkControllers.Unlock()
	return mock.GetNetworkControllersFunc()
}

// GetNetworkControllersCalls gets all the calls that were made to GetNetworkControllers.
// Check the length with:
//
//	len(mockednvpciInterface.GetNetworkControllersCalls())
func (mock *nvpciInterfaceMock) GetNetworkControllersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetNetworkControllers.RLock()
	calls = mock.calls.GetNetworkControllers
	mock.lockGetNetworkControllers.RUnlock()
	return calls
}

// GetPciBridges calls GetPciBridgesFunc.
func (mock *nvpciInterfaceMock) GetPciBridges() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetPciBridgesFunc == nil {
		panic("nvpciInterfaceMock.GetPciBridgesFunc: method is nil but nvpciInterface.GetPciBridges was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPciBridges.Lock()
	mock.calls.GetPciBridges = append(mock.calls.GetPciBridges, callInfo)
	mock.lockGetPciBridges.Unlock()
	return mock.GetPciBridgesFunc()
}

// GetPciBridgesCalls gets all the calls that were made to GetPciBridges.
// Check the length with:
//
//	len(mockednvpciInterface.GetPciBridgesCalls())
func (mock *nvpciInterfaceMock) GetPciBridgesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPciBridges.RLock()
	calls = mock.calls.GetPciBridges
	mock.lockGetPciBridges.RUnlock()
	return calls
}

// GetVGAControllers calls GetVGAControllersFunc.
func (mock *nvpciInterfaceMock) GetVGAControllers() ([]*nvpci.NvidiaPCIDevice, error) {
	if mock.GetVGAControllersFunc == nil {
		panic("nvpciInterfaceMock.GetVGAControllersFunc: method is nil but nvpciInterface.GetVGAControllers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetVGAControllers.Lock()
	mock.calls.GetVGAControllers = append(mock.calls.GetVGAControllers, callInfo)
	mock.lockGetVGAControllers.Unlock()
	return mock.GetVGAControllersFunc()
}

// GetVGAControllersCalls gets all the calls that were made to GetVGAControllers.
// Check the length with:
//
//	len(mockednvpciInterface.GetVGAControllersCalls())
func (mock *nvpciInterfaceMock) GetVGAControllersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetVGAControllers.RLock()
	calls = mock.calls.GetVGAControllers
	mock.lockGetVGAControllers.RUnlock()
	return calls
}
